// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: types/ptypes.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistAggregatorClient is the client API for DistAggregator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistAggregatorClient interface {
	AggregateDist(ctx context.Context, in *AggregateDistReq, opts ...grpc.CallOption) (*None, error)
}

type distAggregatorClient struct {
	cc grpc.ClientConnInterface
}

func NewDistAggregatorClient(cc grpc.ClientConnInterface) DistAggregatorClient {
	return &distAggregatorClient{cc}
}

func (c *distAggregatorClient) AggregateDist(ctx context.Context, in *AggregateDistReq, opts ...grpc.CallOption) (*None, error) {
	out := new(None)
	err := c.cc.Invoke(ctx, "/DistAggregator/AggregateDist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistAggregatorServer is the server API for DistAggregator service.
// All implementations must embed UnimplementedDistAggregatorServer
// for forward compatibility
type DistAggregatorServer interface {
	AggregateDist(context.Context, *AggregateDistReq) (*None, error)
	mustEmbedUnimplementedDistAggregatorServer()
}

// UnimplementedDistAggregatorServer must be embedded to have forward compatible implementations.
type UnimplementedDistAggregatorServer struct {
}

func (UnimplementedDistAggregatorServer) AggregateDist(context.Context, *AggregateDistReq) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateDist not implemented")
}
func (UnimplementedDistAggregatorServer) mustEmbedUnimplementedDistAggregatorServer() {}

// UnsafeDistAggregatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistAggregatorServer will
// result in compilation errors.
type UnsafeDistAggregatorServer interface {
	mustEmbedUnimplementedDistAggregatorServer()
}

func RegisterDistAggregatorServer(s grpc.ServiceRegistrar, srv DistAggregatorServer) {
	s.RegisterService(&DistAggregator_ServiceDesc, srv)
}

func _DistAggregator_AggregateDist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateDistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistAggregatorServer).AggregateDist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistAggregator/AggregateDist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistAggregatorServer).AggregateDist(ctx, req.(*AggregateDistReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DistAggregator_ServiceDesc is the grpc.ServiceDesc for DistAggregator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistAggregator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DistAggregator",
	HandlerType: (*DistAggregatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AggregateDist",
			Handler:    _DistAggregator_AggregateDist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/ptypes.proto",
}
